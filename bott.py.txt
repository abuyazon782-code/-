import os
import logging
import json
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import requests
from pathlib import Path
import sqlite3

# إعدادات البوت
BOT_TOKEN = "7891562508:AAE_hTaz_KP2JWkoHvU0oK6cxw_7Nr4H_78"
ADMIN_ID = "7710449614"  # ضع أي دي المطور هنا

# إعداد التسجيل
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('users.db', check_same_thread=False)
        self.create_tables()
    
    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                subscription_type TEXT DEFAULT 'free',
                upload_count INTEGER DEFAULT 0,
                max_uploads INTEGER DEFAULT 5,
                subscription_expiry DATE,
                join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()
    
    def get_user(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not user:
            # إنشاء مستخدم جديد
            cursor.execute('''
                INSERT INTO users (user_id, subscription_type, max_uploads, subscription_expiry)
                VALUES (?, 'free', 5, ?)
            ''', (user_id, (datetime.datetime.now() + datetime.timedelta(days=10)).date()))
            self.conn.commit()
            return self.get_user(user_id)
        
        return {
            'user_id': user[0],
            'username': user[1],
            'subscription_type': user[2],
            'upload_count': user[3],
            'max_uploads': user[4],
            'subscription_expiry': user[5],
            'join_date': user[6]
        }
    
    def increment_upload_count(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE users SET upload_count = upload_count + 1 WHERE user_id = ?', (user_id,))
        self.conn.commit()
    
    def upgrade_user(self, user_id, plan_type):
        cursor = self.conn.cursor()
        if plan_type == 'premium':
            expiry = (datetime.datetime.now() + datetime.timedelta(days=30)).date()
            cursor.execute('''
                UPDATE users SET subscription_type = ?, max_uploads = 100, subscription_expiry = ?
                WHERE user_id = ?
            ''', ('premium', expiry, user_id))
        elif plan_type == 'vip':
            expiry = (datetime.datetime.now() + datetime.timedelta(days=365)).date()
            cursor.execute('''
                UPDATE users SET subscription_type = ?, max_uploads = 9999, subscription_expiry = ?
                WHERE user_id = ?
            ''', ('vip', expiry, user_id))
        self.conn.commit()

class FileUploaderBot:
    def __init__(self):
        self.db = Database()
        self.services = {
            'file.io': self.upload_fileio,
            'transfer.sh': self.upload_transfersh
        }
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """رسالة الترحيب"""
        user_id = update.effective_user.id
        user_data = self.db.get_user(user_id)
        
        welcome_text = f"""
        🚀 **مرحباً بك في بوت رفع الملفات!**

        👤 **خطتك الحالية:** {user_data['subscription_type'].upper()}
        📊 **الرفعات المتبقية:** {user_data['upload_count']}/{user_data['max_uploads']}
        ⏰ **انتهاء الاشتراك:** {user_data['subscription_expiry']}

        📎 **كيفية الاستخدام:**
        - أرسل أي ملف تريد رفعه
        - سأقوم برفعه وإعادتك رابط التحميل

        💎 **الخطط المتاحة:**
        • 🆓 مجاني - 5 رفعات لمدة 10 أيام
        • 💎 بريميوم - 100 رفعة شهرياً
        • 👑 VIP - رفعات غير محدودة سنوياً

        استخدم /plans لرؤية الخطط
        """
        
        keyboard = [
            [InlineKeyboardButton("📦 رفع ملف", callback_data="upload")],
            [InlineKeyboardButton("💎 الخطط", callback_data="plans"),
             InlineKeyboardButton("👤 حسابي", callback_data="profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def plans(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """عرض الخطط"""
        plans_text = """
        💎 **خطط الاشتراك:**

        🆓 **المجاني**
        • 5 رفعات كحد أقصى
        • مدة 10 أيام
        • ملفات حتى 2GB
        • 🔓 مجاني

        💎 **البريميوم - 5$ شهرياً**
        • 100 رفعة شهرياً
        • دعم أولوية
        • ملفات حتى 5GB
        • ⚡ أسرع رفع

        👑 **VIP - 50$ سنوياً**
        • رفعات غير محدودة
        • دعم فوري
        • ملفات حتى 10GB
        • 🚀 أقصى سرعة

        للترقية راسل المطور: @xc25bb
        """
        
        keyboard = [
            [InlineKeyboardButton("📞 اتصل بالمطور", url="https://t.me/YourUsername")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(plans_text, reply_markup=reply_markup)
    
    async def profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """عرض الملف الشخصي"""
        user_id = update.effective_user.id
        user_data = self.db.get_user(user_id)
        
        # حساب الأيام المتبقية
        expiry_date = datetime.datetime.strptime(user_data['subscription_expiry'], '%Y-%m-%d').date()
        days_left = (expiry_date - datetime.datetime.now().date()).days
        
        profile_text = f"""
        👤 **الملف الشخصي**

        🆔 **الأيدي:** {user_data['user_id']}
        📛 **الاسم:** {update.effective_user.first_name}
        💎 **الخطة:** {user_data['subscription_type'].upper()}
        📊 **الرفعات:** {user_data['upload_count']}/{user_data['max_uploads']}
        ⏰ **الأيام المتبقية:** {days_left} يوم
        📅 **انتهاء الاشتراك:** {user_data['subscription_expiry']}
        """
        
        keyboard = [
            [InlineKeyboardButton("💎 ترقية", callback_data="plans"),
             InlineKeyboardButton("📦 رفع ملف", callback_data="upload")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(profile_text, reply_markup=reply_markup)
    
    async def handle_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """معالجة الملفات المرسلة"""
        user_id = update.effective_user.id
        user_data = self.db.get_user(user_id)
        
        # التحقق من الصلاحية
        expiry_date = datetime.datetime.strptime(user_data['subscription_expiry'], '%Y-%m-%d').date()
        if datetime.datetime.now().date() > expiry_date:
            await update.message.reply_text("""
            ❌ انتهت صلاحية اشتراكك!
            
            📞 للترقية ورجوع الخدمة، راسل المطور:
            @xc25bb
            """)
            return
        
        # التحقق من عدد الرفعات
        if user_data['upload_count'] >= user_data['max_uploads']:
            await update.message.reply_text("""
            ❌ وصلت للحد الأقصى للرفعات!
            
            💎 ترقية لخطة أعلى للحصول على المزيد:
            /plans
            """)
            return
        
        try:
            wait_msg = await update.message.reply_text("⏳ جاري رفع الملف...")
            
            # تحميل الملف
            file = await update.message.effective_attachment.get_file()
            file_path = f"temp_{file.file_id}"
            await file.download_to_drive(file_path)
            
            # رفع الملف
            upload_result = await self.upload_file(file_path)
            
            # حذف الملف المؤقت
            if os.path.exists(file_path):
                os.remove(file_path)
            
            # إرسال النتيجة
            if upload_result['success']:
                # زيادة عداد الرفعات
                self.db.increment_upload_count(user_id)
                user_data = self.db.get_user(user_id)
                
                file_name = Path(file_path).name
                response_text = f"""
                ✅ **تم رفع الملف بنجاح!**

                📁 **الملف:** `{file_name}`
                🔗 **رابط التحميل:**
                `{upload_result['download_url']}`

                ⏰ **مدة الصلاحية:** 14 يوم
                📊 **الرفعات المتبقية:** {user_data['upload_count']}/{user_data['max_uploads']}
                """
                await wait_msg.edit_text(response_text)
            else:
                await wait_msg.edit_text(f"❌ فشل في رفع الملف: {upload_result['error']}")
                
        except Exception as e:
            await update.message.reply_text(f"❌ حدث خطأ: {str(e)}")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """معالجة أزرار الإنلاين"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "plans":
            await self.plans_callback(query)
        elif query.data == "profile":
            await self.profile_callback(query)
        elif query.data == "upload":
            await self.upload_callback(query)
        elif query.data == "back_to_start":
            await self.back_to_start_callback(query)
    
    async def plans_callback(self, query):
        plans_text = """
        💎 **خطط الاشتراك:**

        🆓 **المجاني**
        • 5 رفعات كحد أقصى
        • مدة 10 أيام
        • ملفات حتى 2GB

        💎 **البريميوم - 5$ شهرياً**
        • 100 رفعة شهرياً
        • دعم أولوية

        👑 **VIP - 50$ سنوياً**
        • رفعات غير محدودة
        • دعم فوري

        للترقية راسل المطور: @xc25bb
        """
        
        keyboard = [
            [InlineKeyboardButton("📞 اتصل بالمطور", url="https://t.me/YourUsername")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(plans_text, reply_markup=reply_markup)
    
    async def profile_callback(self, query):
        user_id = query.from_user.id
        user_data = self.db.get_user(user_id)
        
        expiry_date = datetime.datetime.strptime(user_data['subscription_expiry'], '%Y-%m-%d').date()
        days_left = (expiry_date - datetime.datetime.now().date()).days
        
        profile_text = f"""
        👤 **الملف الشخصي**

        🆔 **الأيدي:** {user_data['user_id']}
        📛 **الاسم:** {query.from_user.first_name}
        💎 **الخطة:** {user_data['subscription_type'].upper()}
        📊 **الرفعات:** {user_data['upload_count']}/{user_data['max_uploads']}
        ⏰ **الأيام المتبقية:** {days_left} يوم
        """
        
        keyboard = [
            [InlineKeyboardButton("💎 ترقية", callback_data="plans")],
            [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(profile_text, reply_markup=reply_markup)
    
    async def upload_callback(self, query):
        await query.edit_message_text("📦 أرسل لي الملف الذي تريد رفعه الآن...")
    
    async def back_to_start_callback(self, query):
        user_id = query.from_user.id
        user_data = self.db.get_user(user_id)
        
        welcome_text = f"""
        🚀 **مرحباً بك في بوت رفع الملفات!**

        👤 **خطتك الحالية:** {user_data['subscription_type'].upper()}
        📊 **الرفعات المتبقية:** {user_data['upload_count']}/{user_data['max_uploads']}

        📎 أرسل أي ملف لبدء الرفع
        """
        
        keyboard = [
            [InlineKeyboardButton("📦 رفع ملف", callback_data="upload")],
            [InlineKeyboardButton("💎 الخطط", callback_data="plans"),
             InlineKeyboardButton("👤 حسابي", callback_data="profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(welcome_text, reply_markup=reply_markup)
    
    # وظائف الرفع (نفس السابق)
    async def upload_file(self, file_path):
        for service_name, upload_func in self.services.items():
            result = upload_func(file_path)
            if result['success']:
                result['service'] = service_name
                return result
        return {'success': False, 'error': 'جميع الخدمات غير متاحة'}
    
    def upload_fileio(self, file_path):
        try:
            with open(file_path, 'rb') as file:
                files = {'file': file}
                response = requests.post('https://file.io', files=files)
            
            if response.status_code == 200:
                data = response.json()
                if data['success']:
                    return {'success': True, 'download_url': data['link']}
            return {'success': False, 'error': 'فشل في الرفع'}
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def upload_transfersh(self, file_path):
        try:
            file_name = Path(file_path).name
            with open(file_path, 'rb') as file:
                response = requests.put(
                    f'https://transfer.sh/{file_name}',
                    files={'file': file}
                )
            
            if response.status_code == 200:
                return {'success': True, 'download_url': response.text.strip()}
            return {'success': False, 'error': f'خطأ: {response.status_code}'}
        except Exception as e:
            return {'success': False, 'error': str(e)}

# أوامر المطور
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """إحصائيات المطور"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("❌ ليس لديك صلاحية للوصول إلى هذا الأمر.")
        return
    
    bot = context.bot_data.get('uploader_bot')
    if not bot:
        await update.message.reply_text("❌ البوت غير مهيء.")
        return
    
    cursor = bot.db.conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE subscription_type != "free"')
    premium_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT SUM(upload_count) FROM users')
    total_uploads = cursor.fetchone()[0] or 0
    
    stats_text = f"""
    📊 **إحصائيات البوت**
    
    👥 **إجمالي المستخدمين:** {total_users}
    💎 **المستخدمين المميزين:** {premium_users}
    📦 **إجمالي الرفعات:** {total_uploads}
    📈 **نسبة المميزين:** {((premium_users/total_users)*100 if total_users > 0 else 0):.1f}%
    """
    
    await update.message.reply_text(stats_text)

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """بث رسالة للمستخدمين"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("❌ ليس لديك صلاحية للوصول إلى هذا الأمر.")
        return
    
    if not context.args:
        await update.message.reply_text("❌ يرجى كتابة الرسالة بعد الأمر.\nمثال: /broadcast مرحبا بالجميع")
        return
    
    message = ' '.join(context.args)
    bot = context.bot_data.get('uploader_bot')
    
    cursor = bot.db.conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    
    success = 0
    failed = 0
    
    for user in users:
        try:
            await context.bot.send_message(user[0], f"📢 إشعار من المطور:\n\n{message}")
            success += 1
        except:
            failed += 1
    
    await update.message.reply_text(f"✅ تم البث:\n• نجح: {success}\n• فشل: {failed}")

def main():
    """الدالة الرئيسية"""
    application = Application.builder().token(BOT_TOKEN).build()
    uploader = FileUploaderBot()
    
    # حفظ كائن البوت في context
    application.bot_data['uploader_bot'] = uploader
    
    # إضافة handlers
    application.add_handler(CommandHandler("start", uploader.start))
    application.add_handler(CommandHandler("plans", uploader.plans))
    application.add_handler(CommandHandler("profile", uploader.profile))
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("broadcast", admin_broadcast))
    
    # معالجة الأزرار
    application.add_handler(CallbackQueryHandler(uploader.button_handler))
    
    # معالجة الملفات
    application.add_handler(MessageHandler(
        filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.AUDIO,
        uploader.handle_file
    ))
    
    # بدء البوت
    print("🤖 البوت يعمل بنظام Freemium...")
    application.run_polling()

if __name__ == "__main__":
    main()#80FF00